-------------------- Create a key-pair --------------------------------------------------------
aws ec2 create-key-pair --key-name KoptsDemo --query 'KeyMaterial' --output text > KoptsDemo.pem
aws ec2 create-key-pair --key-name KoptsDemoKeyPair --query 'KeyMaterial' --output text > KoptsDemoKeyPair.pem

--> chmod 400 KoptsDemoKeyPair.pem

===================== Launch an Ubuntu instance =======================
aws ec2 run-instances --image-id ami-7c412f13 --count 1 --instance-type t2.micro --key-name KoptsDemoKeyPair --security-group-ids sg-612e6f0c --subnet-id subnet-9d530bf6

"InstanceId": "i-004c8492110601698"

public ip: 18.197.59.154

===================== SSH into the instance with PUTTY ============================

#ssh -i "KoptsDemoKeyPair.pem" ubuntu@18.184.120.157
#ssh -i "KoptsDemoKeyPair.pem" ubuntu@ec2-18-197-59-154.compute-1.amazonaws.com

===================== Setup AWS-cli on Ubuntu instance =================
1. cat /etc/lsb-release
2. apt-get update && apt-get install awscl
3. aws --version
4. aws configure
5. 
===================== Create an S3 Bucket ==============================

===================== Install kubectl on the Ubuntu instance ===========
curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl

chmod +x ./kubectl

sudo mv ./kubectl /usr/local/bin/kubectl

===================== install kops on ubuntu instance =========================
wget https://github.com/kubernetes/kops/releases/download/1.9.0/kops-linux-amd64
chmod +x kops-linux-amd64
sudo mv kops-linux-amd64 /usr/local/bin/kops

===================== Create a private Hosted Zone on Route53 =================
ex: demo.k8s.kalyber.com

vpc-c11c7aaa
eu-central-1
780462955238

Important
To use private hosted zones, you must set the following Amazon VPC settings to true:
enableDnsHostnames
enableDnsSupport

==================== Create an S3 Bucket to hold cluster configuration ========
aws s3 mb s3://clusters.k8s.kalyber.com

==================== Expose the environment variables =========================
export KOPS_STATE_STORE=s3://clusters.k8s.kalyber.com

==================== Create Kubernetes Cluster ================================
kops create cluster --cloud=aws --zones=eu-central-1a --name=k8s.demo.kalyber.com --dns-zone=demo.kalyber.com --dns private

==================== Single master Cluster ===================================
kops create cluster  --name eucentral.k8s.kalyber.com --zones=eu-central-1 --yes

==================== Multi-Master Cluster =====================================
kops create cluster --name eucentral.k8s.kalyber.com --master-count 3 --node-count 5 --zones=eu-central-1 --yes

==================== Validate the Cluster ====================================
kops validate cluster k8s.demo.kalyber.com

==================== Run the Cluster ==========================================
kops update cluster k8s.demo.kalyber.com --yes


==================== Get a summary of available contexts ======================
kubectl config get-contexts


==================== Get summary of current context ===========================
kubectl config current-context

==================== To Edit the Cluster =======================================
kops edit cluster demo.k8s.kalyber.com

==================== To Edit Node instance group =============================
kops edit ig --name=demo.k8s.kalyber.com nodes

=================== To Edit the Master Instance group =========================
kops edit ig --name=demo.k8s.kalyber.com master-eu-central-1

=================== Enable Kubernetes UI =====================================
kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml

================== Use the kubctl proxy to access the UI from your machine ===
# kubectl proxy --port=8080 &

kubectl proxy --address 0.0.0.0 --accept-hosts '.*' --port 8080

==================== Check existing secrets in the kube-system namespace =====
kubectl -n kube-system describe secret default-token-4gp87

--> Type:  kubernetes.io/service-account-token
--> Use this token to login to the dashboard

kubectl -n kube-system get secret


==================== Deploy 2 nginx Containers ===============================
kubectl run sample-nginx --image=nginx --replicas=2 --port=80

==================== Get the Pods ===========================================
kubectl get pods

==================== Get the list of all the pods in kube-system namespace ==
kubectl get pods --namespace kube-system

==================== Get logs from the pod ==================================
kubectl logs <pod-name> --namespace <namespace-name>

==================== Execute a shell on the running pod =====================
kubectl exec -it <pod-name> /bin/bash

==================== Yaml for Creating an nginx Pod ==========================
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
  labels:
    name: nginx-pod
spec:
  containers:
  - name: nginx
    image: nginx:latest
    ports:
    - containerPort: 80

================== Create an nginx pod from yaml file =====================
kubectl apply -f pod.yaml

================== Watch the status of the Pod =============================
kubectl get pods -w

==================== Create a Deployment ===================================
apiVersion: extensions/v1beta1
kind: Deployment # kubernetes object type
metadata:
  name: nginx-deployment # deployment name
spec:
  replicas: 3 # number of replicas
  template:
    metadata:
      labels:
        app: nginx # pod labels
    spec:
      containers:
      - name: nginx # container name
        image: nginx:1.12.1 # nginx image
        imagePullPolicy: IfNotPresent # if exists, will not pull new image
        ports: # container and host port assignments
        - containerPort: 80
        - containerPort: 443

--> kubectl create -f deployment.yaml --record
--> The --record flag will track changes made through each revision

==================== Get the replica set for the deployment ================
kubectl get replicaset

==================== Get the deployments ====================================
kubectl get deployments

==================== Describe Deployments ===================================
kubectl describe deployments

======================= Replica scaling =====================================
kubectl scale --replicas=5 deployment/nginx-deployment

==================== Expose the deployment as service =======================
kubectl expose deployment sample-nginx --port=80 --type=LoadBalancer
--> This will create an ELB in front of those 2 containers and allow us
    to publicly access them

==================== Get the service ========================================
kubectl get services -o wide

=================== Open the ELB URL in the browser to view nginx ===========
a172eb2bd482b11e88dfe026e31c0f66-220786834.eu-central-1.elb.amazonaws.com

=================== View the UI by accessing master node ====================
1. Open the public IP of the master node in a browser
2. It will ask for credentials
3. Run command "kubectl config view" to see the credentials --> LnvIVeT0JgYcl9WFwcEiXmOlE7WAYz13

================== Non-parallel Job =========================================
apiVersion: batch/v1
kind: Job
metadata:
  name: wait
spec:
  template:
    metadata:
      name: wait
    spec:
      containers:
      - name: wait
        image: ubuntu
        command: ["sleep",  "20"]
      restartPolicy: Never
--> kubectl apply -f job.yaml

================== Parallel Job =============================================
apiVersion: batch/v1
kind: Job
metadata:
  name: wait
spec:
  completions: 6
  parallelism: 2
  template:
    metadata:
      name: wait
    spec:
      containers:
      - name: wait
        image: ubuntu
        command: ["sleep",  "20"]
      restartPolicy: Never

--> job will be complete when six pods have successfully completed
--> A maximum of two pods will run in parallel at a given time

----> kubectl apply -f job-parallel.yaml

================== Custom namespace ============================================
kind: Namespace
apiVersion: v1
metadata:
  name: dev
  labels:
    name: dev

--> kubectl apply -f namespace.yaml
will create the dev namespace

=================== Get details about the dev Namespace =====================
kubectl describe ns/dev

=================== Get the list of Namespaces ===============================
kubectl get ns

=================== Create a new Namespace ==================================
kubectl create ns dev2

=================== New Namespace using a configuration file ================
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nginx-deployment-ns
  namespace: dev
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.12.1
        ports:
        - containerPort: 80
        - containerPort: 443

--> kubectl apply -f deployment-namespace.yaml
================= Query the Namespace ======================================
kubectl get deployments/nginx-deployment-ns -n dev -o jsonpath={.metadata.namespace} dev






